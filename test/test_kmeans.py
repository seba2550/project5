# Write your k-means unit tests here
from cluster import (KMeans, make_clusters)
import pytest
import numpy as np


def test_kmeans_zero():
	"""
	Start out with a basic test: Model should not run if k = 0
	"""
	with pytest.raises(ValueError) as error_message:
		km = KMeans(k = 0)
	assert "K must be greater than 0!" in str(error_message.value)

def test_kmeans_output():
	""" 
	Another basic test: Check whether my KMeans implementation produces the correct number of prediction labels for various "types" of data
	that are generated by the make_clusters function. I'll try this out for various implementations of the data, starting
	with "normal" clusters (scale = 1), then tightening and loosening the clusters (scale = 0.3 and scale = 2, respectively).
	Finally, I'll try this approach on high-dimensional data.
	"""
	norm_clusters, norm_labels = make_clusters(k = 4, scale = 1)
	t_clusters, t_labels = make_clusters(k = 8, scale = 2)
	l_clusters, l_labels = make_clusters(k = 3, scale = 2)
	high_dim_clusters, high_dim_labels = make_clusters(n=1000, m=200, k=3)

	km_norm = KMeans(k = 4)
	km_tight = KMeans(k = 8)
	km_loose = KMeans(k = 3)
	km_high_dim = KMeans(k = 3)

	km_norm.fit(norm_clusters)
	km_tight.fit(t_clusters)
	km_loose.fit(l_clusters)
	km_high_dim.fit(high_dim_clusters)

	norm_preds = km_norm.predict(norm_clusters)
	tight_preds = km_tight.predict(t_clusters)
	loose_preds = km_loose.predict(l_clusters)
	high_dim_preds = km_high_dim.predict(high_dim_clusters)

	n_norm_preds = len(norm_preds)
	n_tight_preds = len(tight_preds)
	n_loose_preds = len(loose_preds)
	n_high_dim_preds = len(high_dim_preds)

	true_n_norm_labs = len(norm_labels)
	true_n_tight_labs = len(t_labels)
	true_n_loose_labs = len(l_labels)
	true_n_high_dim_labs = len(high_dim_labels)

	assert n_norm_preds == true_n_norm_labs
	assert n_tight_preds == true_n_tight_labs
	assert n_loose_preds == true_n_loose_labs
	assert n_high_dim_preds == true_n_high_dim_labs

def test_kmeans_n_obs():
	"""
	My intention for this was to implement a test inside the fit method that would catch if the user was trying to use
	n observations < K. However the TAs have graciously included the raising of an Assertion Error in the make_clusters function. 
	Therefore I've made a test that catches that Assertion Error. Anyways here's the code I was going to implement in the fit method:
	
	if self.n_observations < self.k:
            raise ValueError("K must be equal to or greater than the number of observations in your matrix!")
	
	And this would of course have been caught with this test.
	"""
	with pytest.raises(AssertionError) as error_message:
		clusters, labels = make_clusters(n = 3, k=4, scale=1)
	assert "" in str(error_message.value)